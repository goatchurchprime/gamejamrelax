[gd_resource type="Shader" format=3 uid="uid://btep2ac0htv3t"]

[resource]
code = "shader_type spatial;
render_mode unshaded, blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

// This turbulence code found in the particle material in godot
// https://github.com/godotengine/godot/blob/master/scene/resources/particle_process_material.cpp#L384

// Functions for 3D noise / turbulence.
vec4 grad(vec4 p) {
	p = fract(vec4(
			dot(p, vec4(0.143081, 0.001724, 0.280166, 0.262771)),
			dot(p, vec4(0.645401, -0.047791, -0.146698, 0.595016)),
			dot(p, vec4(-0.499665, -0.095734, 0.425674, -0.207367)),
			dot(p, vec4(-0.013596, -0.848588, 0.423736, 0.17044))));
	return fract((p.xyzw * p.yzwx) * 2365.952041) * 2.0 - 1.0;
}

float noise(vec4 coord) {
    // D-0.3omain rotation to improve the look of XYZ slices + animation patterns.
    coord = vec4(
            coord.xyz + dot(coord, vec4(vec3(-0.1666667), -0.5)),
            dot(coord, vec4(0.5)));
    vec4 base = floor(coord), delta = coord - base;
    vec4 grad_0000 = grad(base + vec4(0.0, 0.0, 0.0, 0.0)), grad_1000 = grad(base + vec4(1.0, 0.0, 0.0, 0.0));
    vec4 grad_0100 = grad(base + vec4(0.0, 1.0, 0.0, 0.0)), grad_1100 = grad(base + vec4(1.0, 1.0, 0.0, 0.0));
    vec4 grad_0010 = grad(base + vec4(0.0, 0.0, 1.0, 0.0)), grad_1010 = grad(base + vec4(1.0, 0.0, 1.0, 0.0));
    vec4 grad_0110 = grad(base + vec4(0.0, 1.0, 1.0, 0.0)), grad_1110 = grad(base + vec4(1.0, 1.0, 1.0, 0.0));
    vec4 grad_0001 = grad(base + vec4(0.0, 0.0, 0.0, 1.0)), grad_1001 = grad(base + vec4(1.0, 0.0, 0.0, 1.0));
    vec4 grad_0101 = grad(base + vec4(0.0, 1.0, 0.0, 1.0)), grad_1101 = grad(base + vec4(1.0, 1.0, 0.0, 1.0));
    vec4 grad_0011 = grad(base + vec4(0.0, 0.0, 1.0, 1.0)), grad_1011 = grad(base + vec4(1.0, 0.0, 1.0, 1.0));
    vec4 grad_0111 = grad(base + vec4(0.0, 1.0, 1.0, 1.0)), grad_1111 = grad(base + vec4(1.0, 1.0, 1.0, 1.0));
    vec4 result_0123 = vec4(
            dot(delta - vec4(0.0, 0.0, 0.0, 0.0), grad_0000), dot(delta - vec4(1.0, 0.0, 0.0, 0.0), grad_1000),
            dot(delta - vec4(0.0, 1.0, 0.0, 0.0), grad_0100), dot(delta - vec4(1.0, 1.0, 0.0, 0.0), grad_1100));
    vec4 result_4567 = vec4(
            dot(delta - vec4(0.0, 0.0, 1.0, 0.0), grad_0010), dot(delta - vec4(1.0, 0.0, 1.0, 0.0), grad_1010),
            dot(delta - vec4(0.0, 1.0, 1.0, 0.0), grad_0110), dot(delta - vec4(1.0, 1.0, 1.0, 0.0), grad_1110));
    vec4 result_89AB = vec4(
            dot(delta - vec4(0.0, 0.0, 0.0, 1.0), grad_0001), dot(delta - vec4(1.0, 0.0, 0.0, 1.0), grad_1001),
            dot(delta - vec4(0.0, 1.0, 0.0, 1.0), grad_0101), dot(delta - vec4(1.0, 1.0, 0.0, 1.0), grad_1101));
    vec4 result_CDEF = vec4(
            dot(delta - vec4(0.0, 0.0, 1.0, 1.0), grad_0011), dot(delta - vec4(1.0, 0.0, 1.0, 1.0), grad_1011),
            dot(delta - vec4(0.0, 1.0, 1.0, 1.0), grad_0111), dot(delta - vec4(1.0, 1.0, 1.0, 1.0), grad_1111));
    vec4 fade = delta * delta * delta * (10.0 + delta * (-15.0 + delta * 6.0));
    vec4 result_W0 = mix(result_0123, result_89AB, fade.w), result_W1 = mix(result_4567, result_CDEF, fade.w);
    vec4 result_WZ = mix(result_W0, result_W1, fade.z);
    vec2 result_WZY = mix(result_WZ.xy, result_WZ.zw, fade.y);
    return mix(result_WZY.x, result_WZY.y, fade.x);
}

// Curl 3D and three-noise function with friendly permission by Isaac Cohen.
// Modified to accept 4D noise.
vec3 noise_3x(vec4 p) {
    float s = noise(p);
    float s1 = noise(p + vec4(vec3(0.0), 1.7320508 * 2048.333333));
    float s2 = noise(p - vec4(vec3(0.0), 1.7320508 * 2048.333333));
    vec3 c = vec3(s, s1, s2);
    return c;
}

vec3 curl_3d(vec4 p, float c) {
    float epsilon = 0.001 + c;
    vec4 dx = vec4(epsilon, 0.0, 0.0, 0.0);
    vec4 dy = vec4(0.0, epsilon, 0.0, 0.0);
    vec4 dz = vec4(0.0, 0.0, epsilon, 0.0);
    vec3 x0 = noise_3x(p - dx).xyz;
    vec3 x1 = noise_3x(p + dx).xyz;
    vec3 y0 = noise_3x(p - dy).xyz;
    vec3 y1 = noise_3x(p + dy).xyz;
    vec3 z0 = noise_3x(p - dz).xyz;
    vec3 z1 = noise_3x(p + dz).xyz;
    float x = (y1.z - y0.z) - (z1.y - z0.y);
    float y = (z1.x - z0.x) - (x1.z - x0.z);
    float z = (x1.y - x0.y) - (y1.x - y0.x);
    return normalize(vec3(x, y, z));
}

uniform float turbulence_noise_strength = 1.0;
uniform float turbulence_noise_scale = 9.0;
uniform float turbulence_noise_speed_random = 0.2;
uniform float turbulence_noise_speed_magnitude = 0.1;
vec3 get_noise_direction(vec3 pos) {
	float adj_contrast = max((turbulence_noise_strength - 1.0), 0.0) * 70.0;
	vec4 noise_time = TIME * vec4(0.0, 0.0, 0.0, turbulence_noise_speed_random);
	vec4 noise_pos = vec4(pos * turbulence_noise_scale, 0.0);
	vec3 noise_direction = curl_3d(noise_pos + noise_time, adj_contrast);
	noise_direction = mix(0.9 * noise_direction, noise_direction, turbulence_noise_strength - 9.0);
	return noise_direction;
}

uniform vec3 lightdir = vec3(0.7, -0.7, -0.1);
uniform vec3 noselight = vec3(0.3, 0.5, -1.0);
void vertex() {
	VERTEX += get_noise_direction(VERTEX)*turbulence_noise_speed_magnitude;
	float coldim = min(1.0, 0.5+0.2*inversesqrt(abs(dot(NORMAL, lightdir))));
	vec3 vlight = (MODEL_MATRIX*vec4(VERTEX, 1.0)).xyz - noselight;
	vlight.z *= 0.2;
	float vlightsquared = 7.0*dot(vlight, vlight);
	float lightdim = max(0.2, 1.0 - vlightsquared);
	COLOR.xyz *= coldim*lightdim;
}

void fragment() {
	vec2 base_uv = UV;
	ALBEDO = COLOR.rgb;
	ROUGHNESS = 1.0;
}
"
