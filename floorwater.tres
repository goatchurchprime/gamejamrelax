[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://dg4lqg6r354f3"]

[sub_resource type="Shader" id="Shader_pktb4"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

const float tw = 0.1;
void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	vec4 albedo_tex = texture(texture_albedo, UV);
	float t = mod(TIME*1.1, (1.0 + 2.0*tw)) - tw ;
	//if (abs(albedo_tex.r - t) < tw)
	//	VERTEX.z += 0.1;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	float t = mod(TIME*0.1, (1.0 + 2.0*tw)) - tw ;
	if (abs(albedo_tex.r - t) > tw)
		ALBEDO = vec3(0.3,0.0,0.0); //albedo.rgb * albedo_tex.rgb;
	else
		ALBEDO = albedo.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1qw0d"]
fractal_type = 0
cellular_return_type = 3
domain_warp_type = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8jl4v"]
seamless = true
noise = SubResource("FastNoiseLite_1qw0d")

[resource]
render_priority = 0
shader = SubResource("Shader_pktb4")
shader_parameter/albedo = Color(0.270588, 1, 1, 0.0470588)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(4, 4, 4)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_8jl4v")
